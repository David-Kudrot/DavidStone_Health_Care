[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patient.models",
        "description": "patient.models",
        "isExtraImport": true,
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "AvailableTime",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "doctor.models",
        "description": "doctor.models",
        "isExtraImport": true,
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "pagination",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "SpecializationViewset",
        "importPath": "doctor.views",
        "description": "doctor.views",
        "isExtraImport": true,
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "appointment.migrations.0001_initial",
        "description": "appointment.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('doctor', '0001_initial'),\n        ('patient', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[",
        "detail": "appointment.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "appointment.migrations.0002_remove_appointment_symptom_appointment_description",
        "description": "appointment.migrations.0002_remove_appointment_symptom_appointment_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('appointment', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='appointment',\n            name='symptom',\n        ),\n        migrations.AddField(",
        "detail": "appointment.migrations.0002_remove_appointment_symptom_appointment_description",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "appointment.admin",
        "description": "appointment.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ['doctor_name', 'patient_name', 'appointment_types', 'appointment_status', 'description', 'time', 'cancel']\n    def patient_name(self,obj):\n        return obj.patient.user.first_name\n    def doctor_name(self,obj):\n        return obj.doctor.user.first_name\n    # save_model() method die admin, running kore dilei user email pabe\n    def save_model(self, request, obj, form, change):\n        obj.save()\n        if obj.appointment_status == \"Running\" and obj.appointment_types == \"Online\":",
        "detail": "appointment.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentConfig",
        "kind": 6,
        "importPath": "appointment.apps",
        "description": "appointment.apps",
        "peekOfCode": "class AppointmentConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'appointment'",
        "detail": "appointment.apps",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "appointment.models",
        "description": "appointment.models",
        "peekOfCode": "class Appointment(models.Model):\n    patient = models.ForeignKey(Patient, on_delete = models.CASCADE)\n    doctor = models.ForeignKey(Doctor, on_delete = models.CASCADE)\n    appointment_types = models.CharField(choices = APPOINTMENT_TYPES, max_length = 10)\n    appointment_status = models.CharField(choices = APPOINTMENT_STATUS, max_length = 10, default = \"Pending\")\n    description = models.TextField(null=True, blank=True)\n    time = models.ForeignKey(AvailableTime, on_delete = models.CASCADE)\n    cancel = models.BooleanField(default = False)\n    def __str__(self):\n        return f\"Doctor : {self.doctor.user.first_name} , Patient : {self.patient.user.first_name}\"",
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "APPOINTMENT_STATUS",
        "kind": 5,
        "importPath": "appointment.models",
        "description": "appointment.models",
        "peekOfCode": "APPOINTMENT_STATUS = [\n    ('Completed', 'Completed'),\n    ('Pending', 'Pending'),\n    ('Running', 'Running'),\n]\nAPPOINTMENT_TYPES = [\n    ('Offline', 'Offline'),\n    ('Online', 'Online'),\n]\nclass Appointment(models.Model):",
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "APPOINTMENT_TYPES",
        "kind": 5,
        "importPath": "appointment.models",
        "description": "appointment.models",
        "peekOfCode": "APPOINTMENT_TYPES = [\n    ('Offline', 'Offline'),\n    ('Online', 'Online'),\n]\nclass Appointment(models.Model):\n    patient = models.ForeignKey(Patient, on_delete = models.CASCADE)\n    doctor = models.ForeignKey(Doctor, on_delete = models.CASCADE)\n    appointment_types = models.CharField(choices = APPOINTMENT_TYPES, max_length = 10)\n    appointment_status = models.CharField(choices = APPOINTMENT_STATUS, max_length = 10, default = \"Pending\")\n    description = models.TextField(null=True, blank=True)",
        "detail": "appointment.models",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "appointment.serializers",
        "description": "appointment.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    patient = serializers.StringRelatedField(many=False)\n    doctor = serializers.StringRelatedField(many=False)\n    time = serializers.StringRelatedField(many=False)\n    class Meta:\n        model = models.Appointment\n        fields = '__all__'",
        "detail": "appointment.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "appointment.urls",
        "description": "appointment.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('', views.AppointmentViewset)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "appointment.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "appointment.urls",
        "description": "appointment.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "appointment.urls",
        "documentation": {}
    },
    {
        "label": "AppointmentViewset",
        "kind": 6,
        "importPath": "appointment.views",
        "description": "appointment.views",
        "peekOfCode": "class AppointmentViewset(viewsets.ModelViewSet):\n    queryset = models.Appointment.objects.all() # Appointment model er sob data asbe\n    serializer_class = serializers.AppointmentSerializer\n    def get_queryset(self):\n        queryset = super().get_queryset() # uporer queryset theke all data queryset variable a rakhlam karon eta k patient_id die filter kore override korbo\n        patient_id = self.request.query_params.get('patient_id') # url er parameter patient_id k get korlam \n        # jodi patient_id thake tobe filter korlam oi patient_id die r queryset k return korlam \n        if patient_id: \n            queryset = queryset.filter(patient_id=patient_id)\n        return queryset",
        "detail": "appointment.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contact_us.migrations.0001_initial",
        "description": "contact_us.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContactUs',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=50)),",
        "detail": "contact_us.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contact_us.migrations.0002_contactus_email",
        "description": "contact_us.migrations.0002_contactus_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contact_us', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='contactus',\n            name='email',\n            field=models.CharField(blank=True, max_length=50, null=True),\n        ),",
        "detail": "contact_us.migrations.0002_contactus_email",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contact_us.migrations.0003_subscribe",
        "description": "contact_us.migrations.0003_subscribe",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contact_us', '0002_contactus_email'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Subscribe',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('email', models.CharField(max_length=40)),",
        "detail": "contact_us.migrations.0003_subscribe",
        "documentation": {}
    },
    {
        "label": "ContactModelAdmin",
        "kind": 6,
        "importPath": "contact_us.admin",
        "description": "contact_us.admin",
        "peekOfCode": "class ContactModelAdmin(admin.ModelAdmin):\n    list_display = ['name', 'phone_no', 'problem'] # admin a ei list a dekhabe\nadmin.site.register(ContactUs, ContactModelAdmin)\nadmin.site.register(Subscribe)",
        "detail": "contact_us.admin",
        "documentation": {}
    },
    {
        "label": "ContactUsConfig",
        "kind": 6,
        "importPath": "contact_us.apps",
        "description": "contact_us.apps",
        "peekOfCode": "class ContactUsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contact_us'",
        "detail": "contact_us.apps",
        "documentation": {}
    },
    {
        "label": "ContactUs",
        "kind": 6,
        "importPath": "contact_us.models",
        "description": "contact_us.models",
        "peekOfCode": "class ContactUs(models.Model):\n    name = models.CharField(max_length=50)\n    phone_no = models.CharField(max_length=15)\n    email = models.CharField(max_length=50, null=True, blank=True)\n    problem = models.TextField()\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = \"Contact Us\" # admin panel a Contact Uss hoye jawar jonno verbose name plural use kora holo, jate Contact Us hoy\nclass Subscribe(models.Model):",
        "detail": "contact_us.models",
        "documentation": {}
    },
    {
        "label": "Subscribe",
        "kind": 6,
        "importPath": "contact_us.models",
        "description": "contact_us.models",
        "peekOfCode": "class Subscribe(models.Model):\n    email = models.CharField(max_length=40)\n    def __str__(self):\n        return f\"Subscriber Mail : {self.email}\"",
        "detail": "contact_us.models",
        "documentation": {}
    },
    {
        "label": "ContactUsSerializer",
        "kind": 6,
        "importPath": "contact_us.serializers",
        "description": "contact_us.serializers",
        "peekOfCode": "class ContactUsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ContactUs\n        fields = '__all__'\nclass SubscribeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subscribe\n        fields = '__all__'",
        "detail": "contact_us.serializers",
        "documentation": {}
    },
    {
        "label": "SubscribeSerializer",
        "kind": 6,
        "importPath": "contact_us.serializers",
        "description": "contact_us.serializers",
        "peekOfCode": "class SubscribeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subscribe\n        fields = '__all__'",
        "detail": "contact_us.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "contact_us.urls",
        "description": "contact_us.urls",
        "peekOfCode": "router = DefaultRouter() # making a router, router toiri korlaam\nrouter.register('', views.ContactUsViewsets) # router er antena toiri korlam \nrouter.register('subscriber', views.SubscribeViewsets)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "contact_us.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "contact_us.urls",
        "description": "contact_us.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "contact_us.urls",
        "documentation": {}
    },
    {
        "label": "ContactUsViewsets",
        "kind": 6,
        "importPath": "contact_us.views",
        "description": "contact_us.views",
        "peekOfCode": "class ContactUsViewsets(viewsets.ModelViewSet):\n    queryset = models.ContactUs.objects.all()\n    serializer_class = serializers.ContactUsSerializer\nclass SubscribeViewsets(viewsets.ModelViewSet):\n    queryset = models.Subscribe.objects.all()\n    serializer_class = serializers.SubscribeSerializer",
        "detail": "contact_us.views",
        "documentation": {}
    },
    {
        "label": "SubscribeViewsets",
        "kind": 6,
        "importPath": "contact_us.views",
        "description": "contact_us.views",
        "peekOfCode": "class SubscribeViewsets(viewsets.ModelViewSet):\n    queryset = models.Subscribe.objects.all()\n    serializer_class = serializers.SubscribeSerializer",
        "detail": "contact_us.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.asgi",
        "description": "DavidStone_Health_Care.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "DavidStone_Health_Care.asgi",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env()\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Your secret key\nSECRET_KEY = env(\"SECRET_KEY\")\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Your secret key\nSECRET_KEY = env(\"SECRET_KEY\")\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\nCSRF_TRUSTED_ORIGINS = ['https://davidstone-health-care.onrender.com','https://*.127.0.0.1']",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "SECRET_KEY = env(\"SECRET_KEY\")\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\nCSRF_TRUSTED_ORIGINS = ['https://davidstone-health-care.onrender.com','https://*.127.0.0.1']\n# added\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\nCSRF_TRUSTED_ORIGINS = ['https://davidstone-health-care.onrender.com','https://*.127.0.0.1']\n# added\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\nCSRF_TRUSTED_ORIGINS = ['https://davidstone-health-care.onrender.com','https://*.127.0.0.1']\n# added\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ['https://davidstone-health-care.onrender.com','https://*.127.0.0.1']\n# added\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\n# Application definition",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'django_filters',\n    'rest_framework',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware', #\n]",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "ROOT_URLCONF = 'DavidStone_Health_Care.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "WSGI_APPLICATION = 'DavidStone_Health_Care.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nREST_FRAMEWORK = {",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    # jodi global authenticate korte chai tobe eta add korte hobe r na korle views.py te sob gulo dhore dhore authenticated korte hobe\n    # 'DEFAULT_PERMISSION_CLASSES': [",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    # jodi global authenticate korte chai tobe eta add korte hobe r na korle views.py te sob gulo dhore dhore authenticated korte hobe\n    # 'DEFAULT_PERMISSION_CLASSES': [\n    #     'rest_framework.permissions.IsAuthenticated',\n    # ]\n    # globally readonly permissions dite eta korte hobe\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticatedOrReadOnly',\n    ],",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#\nEMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#\nEMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_USE_TLS=True\nEMAIL_PORT=587",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#\nEMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_USE_TLS=True\nEMAIL_PORT=587\nEMAIL_HOST_USER=env(\"EMAIL\")",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.settings",
        "description": "DavidStone_Health_Care.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n#\nEMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST='smtp.gmail.com'\nEMAIL_USE_TLS=True\nEMAIL_PORT=587\nEMAIL_HOST_USER=env(\"EMAIL\")\nEMAIL_HOST_PASSWORD=env(\"EMAIL_PASSWORD\")",
        "detail": "DavidStone_Health_Care.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.urls",
        "description": "DavidStone_Health_Care.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('contact_us/', include('contact_us.urls')),\n    path('services/', include('service.urls')),\n    path('patient/', include('patient.urls')),\n    path('doctor/', include('doctor.urls')),\n    path('appointment/', include('appointment.urls')),\n]\nurlpatterns += static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)",
        "detail": "DavidStone_Health_Care.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "DavidStone_Health_Care.wsgi",
        "description": "DavidStone_Health_Care.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "DavidStone_Health_Care.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0001_initial",
        "description": "doctor.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('patient', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AvailableTime',\n            fields=[",
        "detail": "doctor.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0002_rename_user_doctor_name",
        "description": "doctor.migrations.0002_rename_user_doctor_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('doctor', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='doctor',\n            old_name='user',\n            new_name='name',\n        ),",
        "detail": "doctor.migrations.0002_rename_user_doctor_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0003_rename_name_doctor_user",
        "description": "doctor.migrations.0003_rename_name_doctor_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('doctor', '0002_rename_user_doctor_name'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='doctor',\n            old_name='name',\n            new_name='user',\n        ),",
        "detail": "doctor.migrations.0003_rename_name_doctor_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0004_alter_doctor_image",
        "description": "doctor.migrations.0004_alter_doctor_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('doctor', '0003_rename_name_doctor_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='doctor',\n            name='image',\n            field=models.ImageField(upload_to='doctor/images/'),\n        ),",
        "detail": "doctor.migrations.0004_alter_doctor_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "doctor.migrations.0005_doctor_description",
        "description": "doctor.migrations.0005_doctor_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('doctor', '0004_alter_doctor_image'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='doctor',\n            name='description',\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "doctor.migrations.0005_doctor_description",
        "documentation": {}
    },
    {
        "label": "SpecializationAdmin",
        "kind": 6,
        "importPath": "doctor.admin",
        "description": "doctor.admin",
        "peekOfCode": "class SpecializationAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('name',), }\nclass DesignationAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('name',), }\nadmin.site.register(models.Specialization, SpecializationAdmin)\nadmin.site.register(models.Designation, DesignationAdmin)\nadmin.site.register(models.Doctor)\nclass ReviewAdmin(admin.ModelAdmin):\n    list_display = ['reviewer_name', 'body', 'created', 'rating']\n    def reviewer_name(self, obj):",
        "detail": "doctor.admin",
        "documentation": {}
    },
    {
        "label": "DesignationAdmin",
        "kind": 6,
        "importPath": "doctor.admin",
        "description": "doctor.admin",
        "peekOfCode": "class DesignationAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('name',), }\nadmin.site.register(models.Specialization, SpecializationAdmin)\nadmin.site.register(models.Designation, DesignationAdmin)\nadmin.site.register(models.Doctor)\nclass ReviewAdmin(admin.ModelAdmin):\n    list_display = ['reviewer_name', 'body', 'created', 'rating']\n    def reviewer_name(self, obj):\n        return f\"{obj.reviewer.user.first_name} {obj.reviewer.user.last_name}\"\nadmin.site.register(models.Review, ReviewAdmin)",
        "detail": "doctor.admin",
        "documentation": {}
    },
    {
        "label": "ReviewAdmin",
        "kind": 6,
        "importPath": "doctor.admin",
        "description": "doctor.admin",
        "peekOfCode": "class ReviewAdmin(admin.ModelAdmin):\n    list_display = ['reviewer_name', 'body', 'created', 'rating']\n    def reviewer_name(self, obj):\n        return f\"{obj.reviewer.user.first_name} {obj.reviewer.user.last_name}\"\nadmin.site.register(models.Review, ReviewAdmin)",
        "detail": "doctor.admin",
        "documentation": {}
    },
    {
        "label": "DoctorConfig",
        "kind": 6,
        "importPath": "doctor.apps",
        "description": "doctor.apps",
        "peekOfCode": "class DoctorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'doctor'",
        "detail": "doctor.apps",
        "documentation": {}
    },
    {
        "label": "Specialization",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Specialization(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Designation(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100)\n    def __str__(self):\n        return self.name",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Designation",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Designation(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100)\n    def __str__(self):\n        return self.name\nclass AvailableTime(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Doctor(models.Model):",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "AvailableTime",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class AvailableTime(models.Model):\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name\nclass Doctor(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='doctor/images/')\n    designation = models.ManyToManyField(Designation)\n    specialization = models.ManyToManyField(Specialization)\n    available_time = models.ManyToManyField(AvailableTime)",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Doctor",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Doctor(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='doctor/images/')\n    designation = models.ManyToManyField(Designation)\n    specialization = models.ManyToManyField(Specialization)\n    available_time = models.ManyToManyField(AvailableTime)\n    description = models.TextField(null=True, blank=True)\n    fee = models.IntegerField()\n    meeting_link = models.CharField(max_length=150)\n    def __str__(self):",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "class Review(models.Model):\n    reviewer = models.ForeignKey(Patient, on_delete = models.CASCADE)\n    doctor = models.ForeignKey(Doctor, on_delete = models.CASCADE)\n    body = models.TextField()\n    created = models.DateTimeField(auto_now_add = True)\n    rating = models.CharField(choices = STAR_CHOICES, max_length = 10)\n    def __str__(self):\n        return f\"{self.reviewer.user.first_name}; {self.doctor.user.first_name}\"",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "STAR_CHOICES",
        "kind": 5,
        "importPath": "doctor.models",
        "description": "doctor.models",
        "peekOfCode": "STAR_CHOICES = [\n    ('⭐', '⭐'),\n    ('⭐⭐', '⭐⭐'),\n    ('⭐⭐⭐', '⭐⭐⭐'),\n    ('⭐⭐⭐⭐', '⭐⭐⭐⭐'),\n    ('⭐⭐⭐⭐⭐', '⭐⭐⭐⭐⭐'),\n]\nclass Review(models.Model):\n    reviewer = models.ForeignKey(Patient, on_delete = models.CASCADE)\n    doctor = models.ForeignKey(Doctor, on_delete = models.CASCADE)",
        "detail": "doctor.models",
        "documentation": {}
    },
    {
        "label": "DoctorSerializer",
        "kind": 6,
        "importPath": "doctor.serializers",
        "description": "doctor.serializers",
        "peekOfCode": "class DoctorSerializer(serializers.ModelSerializer):\n    user = serializers.StringRelatedField(many=False) # OneToOne relation tai many=False\n    designation = serializers.StringRelatedField(many=True) # ManyToMany relation tai many=True\n    specialization = serializers.StringRelatedField(many=True) # ManyToMany relation tai many=True\n    available_time = serializers.StringRelatedField(many=False) # OneToOne relation tai many=False\n    class Meta:\n        model = models.Doctor\n        fields = '__all__'\nclass SpecializationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "doctor.serializers",
        "documentation": {}
    },
    {
        "label": "SpecializationSerializer",
        "kind": 6,
        "importPath": "doctor.serializers",
        "description": "doctor.serializers",
        "peekOfCode": "class SpecializationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.Specialization\n        fields = '__all__'\nclass DesignationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.Designation\n        fields = '__all__'\nclass AvailableTimeSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "doctor.serializers",
        "documentation": {}
    },
    {
        "label": "DesignationSerializer",
        "kind": 6,
        "importPath": "doctor.serializers",
        "description": "doctor.serializers",
        "peekOfCode": "class DesignationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.Designation\n        fields = '__all__'\nclass AvailableTimeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.AvailableTime\n        fields = '__all__'\nclass ReviewSerializer(serializers.ModelSerializer):\n    reviewer = serializers.StringRelatedField(many=False)",
        "detail": "doctor.serializers",
        "documentation": {}
    },
    {
        "label": "AvailableTimeSerializer",
        "kind": 6,
        "importPath": "doctor.serializers",
        "description": "doctor.serializers",
        "peekOfCode": "class AvailableTimeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.AvailableTime\n        fields = '__all__'\nclass ReviewSerializer(serializers.ModelSerializer):\n    reviewer = serializers.StringRelatedField(many=False)\n    doctor = serializers.StringRelatedField(many=False)\n    class Meta:\n        model = models.Review\n        fields = '__all__'",
        "detail": "doctor.serializers",
        "documentation": {}
    },
    {
        "label": "ReviewSerializer",
        "kind": 6,
        "importPath": "doctor.serializers",
        "description": "doctor.serializers",
        "peekOfCode": "class ReviewSerializer(serializers.ModelSerializer):\n    reviewer = serializers.StringRelatedField(many=False)\n    doctor = serializers.StringRelatedField(many=False)\n    class Meta:\n        model = models.Review\n        fields = '__all__'",
        "detail": "doctor.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "doctor.urls",
        "description": "doctor.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('list', views.DoctorViewsets)\nrouter.register('specialization', views.SpecializationViewset)\nrouter.register('designation', views.DesignationViewset)\nrouter.register('available_time', views.AvailableTimeViewset)\nrouter.register('reviews', views.ReviewViewset)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "doctor.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "doctor.urls",
        "description": "doctor.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "doctor.urls",
        "documentation": {}
    },
    {
        "label": "DoctorPagination",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class DoctorPagination(pagination.PageNumberPagination):\n    page_size = 1 # page size 1 dilam mane 1ta kore doctor dekhabe, joto dibo tot ta kore show korbe\n    page_size_query_param = page_size\n    max_page_size = 100\nclass DoctorViewsets(viewsets.ModelViewSet):\n    queryset = models.Doctor.objects.all()\n    pagination_class = DoctorPagination # pagination built-in variable/attribute er modhe uporer DoctorPagination class ta add kore dilam\n    serializer_class = serializers.DoctorSerializer\nclass SpecializationViewset(viewsets.ModelViewSet):\n    queryset = models.Specialization.objects.all()",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "DoctorViewsets",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class DoctorViewsets(viewsets.ModelViewSet):\n    queryset = models.Doctor.objects.all()\n    pagination_class = DoctorPagination # pagination built-in variable/attribute er modhe uporer DoctorPagination class ta add kore dilam\n    serializer_class = serializers.DoctorSerializer\nclass SpecializationViewset(viewsets.ModelViewSet):\n    queryset = models.Specialization.objects.all()\n    serializer_class = serializers.SpecializationSerializer\nclass DesignationViewset(viewsets.ModelViewSet):\n    queryset = models.Designation.objects.all()\n    serializer_class = serializers.DesignationSerializer",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "SpecializationViewset",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class SpecializationViewset(viewsets.ModelViewSet):\n    queryset = models.Specialization.objects.all()\n    serializer_class = serializers.SpecializationSerializer\nclass DesignationViewset(viewsets.ModelViewSet):\n    queryset = models.Designation.objects.all()\n    serializer_class = serializers.DesignationSerializer\n# particular doctor id er jonno Available Time filter korbo, tai django filter use kortesi, installed app a add kora lagbe\nclass AvailableTimeForSpecificDoctor(filters.BaseFilterBackend):\n    def filter_queryset(self, request, query_set, view):\n        doctor_id = request.query_params.get(\"doctor_id\") # patient er jonno jemon kora hoise same ekahne ",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "DesignationViewset",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class DesignationViewset(viewsets.ModelViewSet):\n    queryset = models.Designation.objects.all()\n    serializer_class = serializers.DesignationSerializer\n# particular doctor id er jonno Available Time filter korbo, tai django filter use kortesi, installed app a add kora lagbe\nclass AvailableTimeForSpecificDoctor(filters.BaseFilterBackend):\n    def filter_queryset(self, request, query_set, view):\n        doctor_id = request.query_params.get(\"doctor_id\") # patient er jonno jemon kora hoise same ekahne \n        if doctor_id:\n            return query_set.filter(doctor = doctor_id) # Doctor model ache tai eta automatic small doctor likha jabe, jehetu related_name use korinai \n        return query_set",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "AvailableTimeForSpecificDoctor",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class AvailableTimeForSpecificDoctor(filters.BaseFilterBackend):\n    def filter_queryset(self, request, query_set, view):\n        doctor_id = request.query_params.get(\"doctor_id\") # patient er jonno jemon kora hoise same ekahne \n        if doctor_id:\n            return query_set.filter(doctor = doctor_id) # Doctor model ache tai eta automatic small doctor likha jabe, jehetu related_name use korinai \n        return query_set\nclass AvailableTimeViewset(viewsets.ModelViewSet):\n    queryset = models.AvailableTime.objects.all()\n    serializer_class = serializers.AvailableTimeSerializer\n    # filter korar jonno filter_backends built-in variable use kora holo",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "AvailableTimeViewset",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class AvailableTimeViewset(viewsets.ModelViewSet):\n    queryset = models.AvailableTime.objects.all()\n    serializer_class = serializers.AvailableTimeSerializer\n    # filter korar jonno filter_backends built-in variable use kora holo\n    filter_backends = [AvailableTimeForSpecificDoctor]\nclass ReviewViewset(viewsets.ModelViewSet):\n    queryset = models.Review.objects.all()\n    serializer_class = serializers.ReviewSerializer",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "ReviewViewset",
        "kind": 6,
        "importPath": "doctor.views",
        "description": "doctor.views",
        "peekOfCode": "class ReviewViewset(viewsets.ModelViewSet):\n    queryset = models.Review.objects.all()\n    serializer_class = serializers.ReviewSerializer",
        "detail": "doctor.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patient.migrations.0001_initial",
        "description": "patient.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Patient',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "patient.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "patient.migrations.0002_alter_patient_image",
        "description": "patient.migrations.0002_alter_patient_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('patient', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patient',\n            name='image',\n            field=models.ImageField(upload_to='patient/images/'),\n        ),",
        "detail": "patient.migrations.0002_alter_patient_image",
        "documentation": {}
    },
    {
        "label": "PatientAdmin",
        "kind": 6,
        "importPath": "patient.admin",
        "description": "patient.admin",
        "peekOfCode": "class PatientAdmin(admin.ModelAdmin):\n    list_display = ['first_name', 'last_name', 'phone_no', 'email']\n    def first_name(self, obj): # jehetu user foreign key tai user theke first_name pete gele obj.user.first_name likhate hobe\n        return obj.user.first_name\n    def last_name(self, obj):\n        return obj.user.last_name\n    def email(self, obj):\n        return obj.user.email\nadmin.site.register(Patient, PatientAdmin)",
        "detail": "patient.admin",
        "documentation": {}
    },
    {
        "label": "PatientConfig",
        "kind": 6,
        "importPath": "patient.apps",
        "description": "patient.apps",
        "peekOfCode": "class PatientConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'patient'",
        "detail": "patient.apps",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class Patient(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    image = models.ImageField(upload_to=\"patient/images/\")\n    phone_no = models.CharField(max_length=15)\n    def __str__(self):\n        return f\"{self.user.first_name} {self.user.last_name}\"",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "kind": 6,
        "importPath": "patient.serializers",
        "description": "patient.serializers",
        "peekOfCode": "class PatientSerializer(serializers.ModelSerializer):\n    user = serializers.StringRelatedField(many=False) # ekhane output a patient view a patient ta number dekhabe, name ta dekhate StringRelatedField use kora holo r many=False kora holo karon OneToOne field ache, ManytoMany field thakle many=True likha hoto\n    class Meta:\n        model = models.Patient\n        fields = '__all__'\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    confirm_password = serializers.CharField(required=True) # serializer a 2nd password thakena tai, eta declare kora holo r required=True kora holo\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name', 'email', 'password', 'confirm_password']",
        "detail": "patient.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "patient.serializers",
        "description": "patient.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    confirm_password = serializers.CharField(required=True) # serializer a 2nd password thakena tai, eta declare kora holo r required=True kora holo\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'last_name', 'email', 'password', 'confirm_password']\n    def save(self):\n            username = self.validated_data['username']\n            first_name = self.validated_data['first_name']\n            last_name = self.validated_data['last_name']\n            email = self.validated_data['email']",
        "detail": "patient.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "patient.serializers",
        "description": "patient.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    username = serializers.CharField(required=True)\n    password = serializers.CharField(required=True)",
        "detail": "patient.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "patient.urls",
        "description": "patient.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('list', views.PatientViewsets)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('register/', views.UserRegistrationAPIView.as_view(), name='register'),\n    path('login/', views.UserLoginAPIView.as_view(), name='login'),\n    # path('active/<uid64>/<token>/', views.activate, name = 'activate'),# function based activation\n    path('active/<str:uid64>/<str:token>', views.ActivateAccount.as_view(), name='activate_account'), # class based activation\n   path('logout/', views.UserLogoutView.as_view(), name='logout'),\n]",
        "detail": "patient.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "patient.urls",
        "description": "patient.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('register/', views.UserRegistrationAPIView.as_view(), name='register'),\n    path('login/', views.UserLoginAPIView.as_view(), name='login'),\n    # path('active/<uid64>/<token>/', views.activate, name = 'activate'),# function based activation\n    path('active/<str:uid64>/<str:token>', views.ActivateAccount.as_view(), name='activate_account'), # class based activation\n   path('logout/', views.UserLogoutView.as_view(), name='logout'),\n]",
        "detail": "patient.urls",
        "documentation": {}
    },
    {
        "label": "PatientViewsets",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class PatientViewsets(viewsets.ModelViewSet):\n    queryset = models.Patient.objects.all()\n    serializer_class = serializers.PatientSerializer\nclass UserRegistrationAPIView(APIView):\n    serializer_class = serializers.UserRegistrationSerializer\n    # jehetu form er data post hobe tai post method use korbo\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data) # form a motoi same ekhane just serializer user kora hoise, form er data anar jonno, form a request.POST kora hoto\n        if serializer.is_valid():\n            user = serializer.save()",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "UserRegistrationAPIView",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class UserRegistrationAPIView(APIView):\n    serializer_class = serializers.UserRegistrationSerializer\n    # jehetu form er data post hobe tai post method use korbo\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data) # form a motoi same ekhane just serializer user kora hoise, form er data anar jonno, form a request.POST kora hoto\n        if serializer.is_valid():\n            user = serializer.save()\n            # making a activation token for this user, and this is one time token, we can sent it for mail verification and password reset for the user\n            token = default_token_generator.make_token(user)\n            # making uid user.pk mane user er primary key, eta force_bytes byte a convert korbe, r urlsafe_base64_encode korbe jeta user er jonno unique hobe",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "ActivateAccount",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class ActivateAccount(View):\n    def get(self, request, uid64, token):\n        try:\n            uid = urlsafe_base64_decode(uid64).decode()\n            user = User._default_manager.get(pk=uid)\n        except User.DoesNotExist: # jodi user exists na kore obe user = None\n            user = None \n        if user is not None and default_token_generator.check_token(user, token):\n            user.is_active = True \n            user.save()",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "UserLoginAPIView",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class UserLoginAPIView(APIView):\n    def post(self, request):  # jehetu login korte form post kora lage tai only post use korlam\n        serializer = serializers.UserLoginSerializer(data=self.request.data) # same to same jemon form = forms.UserLoginForm(user=self.request.user) kortam\n        # jodi form valid hoi tobe\n        if serializer.is_valid(): \n            username = serializer.validated_data['username'] # user er post form theke username nilam\n            password = serializer.validated_data['password'] # user er post form theke password nilam\n            # user authenticate kina chek korlam username and password die\n            user = authenticate(username=username, password=password)\n            if user:",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "UserLogoutView",
        "kind": 6,
        "importPath": "patient.views",
        "description": "patient.views",
        "peekOfCode": "class UserLogoutView(APIView):\n    def get(self, request):\n        request.user.auth_token.delete() # toiri kora token ta delete kora holo jeno logout korar por same token die login na korte pare\n        logout(request)\n        return redirect('login')",
        "detail": "patient.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "service.migrations.0001_initial",
        "description": "service.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ServiceModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "service.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "service.migrations.0002_extraservice",
        "description": "service.migrations.0002_extraservice",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('service', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExtraService',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "service.migrations.0002_extraservice",
        "documentation": {}
    },
    {
        "label": "ServiceConfig",
        "kind": 6,
        "importPath": "service.apps",
        "description": "service.apps",
        "peekOfCode": "class ServiceConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'service'",
        "detail": "service.apps",
        "documentation": {}
    },
    {
        "label": "ServiceModel",
        "kind": 6,
        "importPath": "service.models",
        "description": "service.models",
        "peekOfCode": "class ServiceModel(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    image = models.ImageField(upload_to=\"service/images\")\n    def __str__(self):\n        return self.name\nclass ExtraService(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    def __str__(self):",
        "detail": "service.models",
        "documentation": {}
    },
    {
        "label": "ExtraService",
        "kind": 6,
        "importPath": "service.models",
        "description": "service.models",
        "peekOfCode": "class ExtraService(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    def __str__(self):\n        return f\"ExtraService : {self.name}\"",
        "detail": "service.models",
        "documentation": {}
    },
    {
        "label": "ServiceSerializer",
        "kind": 6,
        "importPath": "service.serializers",
        "description": "service.serializers",
        "peekOfCode": "class ServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.ServiceModel\n        fields = '__all__'\nclass ExtraServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.ExtraService\n        fields = '__all__'",
        "detail": "service.serializers",
        "documentation": {}
    },
    {
        "label": "ExtraServiceSerializer",
        "kind": 6,
        "importPath": "service.serializers",
        "description": "service.serializers",
        "peekOfCode": "class ExtraServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = models.ExtraService\n        fields = '__all__'",
        "detail": "service.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "service.urls",
        "description": "service.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('', views.ServiceViewsets)\nrouter.register('more', views.ExtraServiceViewsets)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "service.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "service.urls",
        "description": "service.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "service.urls",
        "documentation": {}
    },
    {
        "label": "ServiceViewsets",
        "kind": 6,
        "importPath": "service.views",
        "description": "service.views",
        "peekOfCode": "class ServiceViewsets(viewsets.ModelViewSet):\n    queryset = models.ServiceModel.objects.all()\n    serializer_class = serializers.ServiceSerializer\nclass ExtraServiceViewsets(viewsets.ModelViewSet):\n    queryset = models.ExtraService.objects.all()\n    serializer_class = serializers.ExtraServiceSerializer",
        "detail": "service.views",
        "documentation": {}
    },
    {
        "label": "ExtraServiceViewsets",
        "kind": 6,
        "importPath": "service.views",
        "description": "service.views",
        "peekOfCode": "class ExtraServiceViewsets(viewsets.ModelViewSet):\n    queryset = models.ExtraService.objects.all()\n    serializer_class = serializers.ExtraServiceSerializer",
        "detail": "service.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DavidStone_Health_Care.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]